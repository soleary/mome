#!/usr/bin/env perl

use warnings;
use strict;

use Modern::Perl qw/2018/;
use DBI;
use DateTime;

# Testing should be truthy or undef so we don't end up with '' and such in the db.
my $TESTING;
my $DEBUG;
my $DBFILE = 'sjsmusic.db';

my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });
my $tz = DateTime::TimeZone->new( name => 'local' );
my $date = today();

my $plan_info = $dbh->selectall_hashref(
    "select schedule, number from payment_schedule where date = date('now', 'localtime');", 'schedule');

sub get_account {
    my $momefid = $_[0];

    my $act = $dbh->selectrow_hashref(
        qq{ select momefid, tuition, plan, name, nobill from family where momefid = ?; },
        undef,
        $momefid,
    );

    ($act->{short_name}) = split '/', $act->{name};

    return $act;
}

sub today_is_payment_date {
    return @{$dbh->selectrow_arrayref(qq{ select count(*) from payment_schedule where date = date('now', 'localtime'); })}[0];
}

sub today {
    my $dt = DateTime->now();
    $dt->set_time_zone($tz);
    return $dt;
}

sub write_debit {
    my $act = $_[0];

    my $debit_sth = $dbh->prepare_cached(
        qq{ insert into ledger (momefid, amount, type, date, testing) values (?,?,'debit',date('now'),?);}
    );

    return $debit_sth->execute($act->{momefid}, '-' . $act->{payment}, $act->{testing});
}

sub get_payments {
    my ($balance, $installments) = @_;

    $balance *= 100;
    my $payment = int($balance / $installments);

    $installments -= 1;
    my $residual = $balance - int($payment * $installments);
    my @stream = ($residual, ($payment) x $installments);

    return map {sprintf '%.2f', $_ / 100} @stream;
}

sub get_payment {
    my $a = $_[0];

    my @payments = get_payments($a->{tuition}, $a->{plan});

    my $num = payment_number($a->{plan});

    return $payments[$num - 1];
}

sub payment_number {
    return $plan_info->{$_[0]}{number};
}

# Nobill is 'R' for norate, 'I' for no invoice, 'B' for both
sub dont_rate {
    my $act = $_[0];

    if (defined $act->{nobill}) {
        if ($act->{nobill} eq 'B' or $act->{nobill} eq 'R') {
            warn 'Skipping MOMEFID ', $act->{momefid}, ' nobill ', $act->{nobill};
            return 1;
        }
    }

    return 0;
}

my @todays_plans = $dbh->selectall_array(qq{ select schedule from payment_schedule where date = date('now', 'localtime') });

my $plan_string = $dbh->quote(join ', ', map { $_->[0] } @todays_plans);

my @ids = $dbh->selectall_array(
    qq{ select momefid, plan from family where plan in ($plan_string) and session = (select id from session where active is not null); }
);

foreach my $id (@ids) {
    my $act = get_account($id->[0]);

    $act->{testing} = $TESTING;

    next if dont_rate($act);

    $act->{payment} = get_payment($act);

    printf "%-14s \$%.2f %6d %s\n", $act->{short_name}, $act->{payment}, $act->{tuition}, $act->{plan};
    write_debit($act) unless $DEBUG;
}
