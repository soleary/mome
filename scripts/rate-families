#!/usr/bin/env perl

use warnings;
use strict;

use Modern::Perl qw/2018/;
use DBI;
use Data::Dumper;
use DateTime;
use Math::Currency;

Math::Currency->format('USD');
Math::Currency->format('CURRENCY_SYMBOL','');

my $MONTH = sprintf "%4d-%02d", DateTime->now()->year(),  DateTime->now()->month();
my $DBFILE = 'sjsmusic.db';
my $TESTING = 1;

my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });

my $plan_info = $dbh->selectall_hashref(
    "select schedule, number from payment_schedule where date = '$MONTH'", 'schedule');

sub get_account {
    my $momefid = $_[0];

    my $a = $dbh->selectrow_hashref(
        qq{ select momefid, tuition, plan, name, nobill from family where momefid = ?; },
        undef,
        $momefid,
    );

    ($a->{short_name}) = split '/', $a->{name};

    return $a;
}

sub write_debit {
    my $a = $_[0];

    my $debit_sth = $dbh->prepare_cached(
        qq{ insert into ledger (momefid, amount, type, date) values (?,?,'debit',date('now'));}
    );

    return $debit_sth->execute($a->{momefid}, '-' . $a->{payment});
}

sub get_payments {
    my ($balance, $installments) = @_;

    $balance *= 100;
    my $payment = int($balance / $installments);

    $installments -= 1;
    my $residual = $balance - int($payment * $installments);
    my @stream = ($residual, ($payment) x $installments);

    return map {sprintf '%.2f', $_ / 100} @stream;
}

sub get_payment {
    my $a = $_[0];

    my @payments = get_payments($a->{tuition}, $a->{plan});

    my $num = payment_number($a->{plan});

    return $payments[$num - 1];
}

sub payment_number {
    return $plan_info->{$_[0]}{number};
}

#sub check_debits {
#    $dbh->
#
# Things to add -
#   Read the payment schedule and filter accounts
#   Check each account prior to debit - if exists for this month, skip. (Ignore if they are all test.
#   Add a force flag and a test flag


# Nobill is 'R' for norate, 'I' for no invoice, 'B' for both
sub already_rated {
    my $a = $_[0];

    if (defined $a->{nobill}) {
        if ($a->{nobill} eq 'B' or $a->{nobill} eq 'R') {
            warn 'Skipping MOMEFID ', $a->{momefid}, ' nobill ', $a->{nobill};
            return 1;
        }
    }

    my $last_debit_sth = $dbh->prepare_cached(
        qq{ select date from ledger where type = 'debit' and momefid = ?;}
    );

    $last_debit_sth->execute($a->{momefid});

    my $last_debit = $last_debit_sth->fetchrow_hashref();
    $last_debit_sth->finish();

    if (defined $last_debit->{date}) {
        if (substr($last_debit->{date}, 0, 7) eq $MONTH) {
            warn 'Skipping MOMEFID ', $a->{momefid}, " - already billed for $MONTH";
            return 1;
        }
    }
    return 0;
}

sub plan_this_month {
    return defined $plan_info->{$_[0]};
}

my @ids = $dbh->selectall_array(
    qq{ select momefid from family where session = (select id from session where active is not null); }
);

foreach my $id (@ids) {
    my $a = get_account($id->[0]);

    $a->{testing} = $TESTING;

    next if already_rated($a);

    $a->{payment} = get_payment($a);

    if (plan_this_month($a->{plan})) {
        printf "%-14s %9s %9s %s\n", $a->{short_name}, $a->{payment}, $a->{tuition}, $a->{plan};
        write_debit($a);
    }
}
