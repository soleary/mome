#!/usr/bin/env perl

use Modern::Perl qw/2018/;
use DBI;
use DateTime;
use Getopt::Long;

# Testing should be truthy or undef so we don't end up with '' and such in the db.
my $TESTING;
my $DEBUG;
my $DBFILE = 'sjsmusic.db';

my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });
my $tz = DateTime::TimeZone->new( name => 'local' );
my $date = today();

my $F;
GetOptions(
    'force' => \$F,
);

sub get_account {
    my $momefid = $_[0];

    my $act = $dbh->selectrow_hashref(
        qq{ select momefid, tuition, plan, name, nobill from family where momefid = ?; },
        undef,
        $momefid,
    );

    ($act->{short_name}) = split '/', $act->{name};

    return $act;
}

sub is_charging_date {
    return @{$dbh->selectrow_arrayref(qq{ select count(*) from payment_schedule where date = } . $dbh->quote($_[0]->ymd()) . ';' )}[0];
}

sub today {
    my $dt = DateTime->now();
    $dt->set_time_zone($tz);
    return $dt;
}

sub write_debit {
    my $act = $_[0];

    my $debit_sth = $dbh->prepare_cached(
        qq{ insert into ledger (momefid, amount, type, date, notes, testing) values (?,?,'debit',?,?,?);}
    );

    my $note = $act->{today}->month_name() . ' tuition';

    return $debit_sth->execute($act->{momefid}, '-' . $act->{payment}, $act->{today}->ymd(), $note, $act->{testing});
}

sub get_payments {
    my ($balance, $installments) = @_;

    $balance *= 100;
    my $payment = int($balance / $installments);

    $installments -= 1;
    my $residual = $balance - int($payment * $installments);
    my @stream = ($residual, ($payment) x $installments);

    return map {sprintf '%.2f', $_ / 100} @stream;
}

sub get_payment {
    my $act = $_[0];

    my @payments = get_payments($act->{tuition}, $act->{plan});

    my $num = payment_number($act->{plan}, $act->{billing_date});

    return $payments[$num - 1];
}

sub payment_number {
    my $plan = $dbh->quote($_[0]);
    my $today = $dbh->quote($_[1]->ymd());
    return @{$dbh->selectrow_arrayref(qq{ select number from payment_schedule where date = $today and schedule = $plan; })}[0];
}

# Nobill is 'R' for norate, 'I' for no invoice, 'B' for both
sub dont_charge {
    my $act = $_[0];

    if (defined $act->{nobill}) {
        if ($act->{nobill} eq 'B' or $act->{nobill} eq 'R') {
            warn 'Skipping MOMEFID ', $act->{momefid}, ' nobill ', $act->{nobill};
            return 1;
        }
    }

    return 0;
}

my $today = today();

unless ($F or is_charging_date($today)) {
    die $today->ymd() . " isn't a charging/rating day and --force not specified.\n";
}

print "This will issue charges to all families for the current month. Are you sure?\n";
print "ctrl+c to quit, <enter> to continue\n";
<>;

my $billing_date = $today;

unless (is_charging_date($today)) {
    my ($next_billing_date) = $dbh->selectall_array(
        qq{ select date from payment_schedule where date > date('now', 'localtime') order by date limit 1; }
    );
    my ($y, $m, $d) = split '-', $next_billing_date->[0];

    $billing_date = DateTime->new(year => $y, month => $m, day => $d);
}

my @todays_plans = $dbh->selectall_array(qq{ select schedule from payment_schedule where date = } . $dbh->quote($billing_date->ymd()) . ';');

my $plan_string = join ', ', map { $dbh->quote($_->[0]) } @todays_plans;

my @ids = $dbh->selectall_array(
    qq{ select momefid, plan from family where plan in ($plan_string) and session = (select id from session where active is not null); }
);

foreach my $id (@ids) {
    my $act = get_account($id->[0]);

    $act->{testing} = $TESTING;
    $act->{today} = $today;
    $act->{billing_date} = $billing_date;

    next if dont_charge($act);

    $act->{payment} = get_payment($act);

    printf "%-14s \$%.2f %6d %s\n", $act->{short_name}, $act->{payment}, $act->{tuition}, $act->{plan};
    write_debit($act) unless $DEBUG;
}
