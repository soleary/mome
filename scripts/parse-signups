#!/usr/bin/env perl

use Modern::Perl qw/2018/;
use DBI;
use Text::CSV;
use Data::Dumper;

my $SAFE = 1;
my $DBFILE = 'sjsmusic.db';
my $INFILE = 'responses.csv';

my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });

my $fam_sth = $dbh->prepare( qq { insert into family_member (momefid, personid) values (?,?); });

sub delete_momefid {
    my $momefid = $_[0];

    my @sts = (
        qq{ delete from class_member where personid in (select personid from family_member where momefid = $momefid); },
        qq{ delete from person where id in ( select personid from family_member where momefid = $momefid); },
        qq{ delete from family_member where momefid = $momefid; },
        qq{ delete from family where momefid = $momefid; },
    );

    my @rets = ();
    foreach my $st (@sts) {
        push @rets, $dbh->do($st);
    }
}

sub clean_phone {
    return '' unless $_[0];
    $_ = $_[0];

    s/\D//g;
    s/^1//g;
    /(\d{3})(\d{3})(\d{4})/;

    return "$1-$2-$3";
}

{
    my %emails = ();
    my %phones = ();

    sub write_parent {
        my $x = 0;
        my @fields = qw/ momefid first last email phone /;
        my %rec = map { $_ => $_[$x++] } @fields;
        my @in_fields = qw/ first last email phone /;

        $rec{phone} = clean_phone($rec{phone});
        $rec{email} = lc $rec{email};

        if ($emails{$rec{phone}}++) {
            $rec{phone} = undef;
        }

        if ($emails{$rec{email}}++) {
            $rec{email} = undef;
        }

        my $in_sth = $dbh->prepare_cached(
            qq{ insert into person ( type, firstname, lastname, email, phone ) values (?,?,?,?,?); }
        );

        $in_sth->execute( 'parent', map{ce($_)} @rec{@in_fields} );
        my $id = $dbh->last_insert_id('','', 'person', 'id');

        $fam_sth->execute($rec{momefid}, $id);
    }
}

sub write_family {
    my $x = 0;
    my @fields = qw/ momefid tuition permission plan /;
    my %rec = map { $_ => $_[$x++] } @fields;
    my @in_fields = qw/ momefid family_name tuition plan permission /;

    my $names_sth = $dbh->prepare_cached(
        qq{ select distinct(lastname) from person where id in ( select personid from family_member where momefid = ?); }
    );
    $names_sth->execute($rec{momefid});
    my @names = map { $_->[0] } @{ $names_sth->fetchall_arrayref() };
    $rec{family_name} = join ' / ', @names;

    ($rec{permission}) = map { lc } $rec{permission} =~ /^(\w+)/;
    ($rec{plan}) = $rec{plan} =~ /^(\d)/;

    my $family_sth = $dbh->prepare_cached(
        qq{ insert into family ( momefid, name, tuition, plan, permission, session ) values (?, ?, ?, ?, ?,
            (select id from session where active is not null)); }
    );

    $family_sth->execute( map{ce($_)}@rec{@in_fields});
}

sub write_student {
    my $x = 0;
    my @fields = qw/ momefid first last grade /;
    my %rec = map { $_ => $_[$x++] } @fields;
    my @in_fields = qw/ first last grade /;

    my $in_sth = $dbh->prepare_cached(
        qq{ insert into person ( type, firstname, lastname, grade ) values (?,?,?,?); }
    );

    $in_sth->execute( 'student', map{ce($_)} @rec{@in_fields} );
    my $id = $dbh->last_insert_id('','', 'person', 'id');

    $fam_sth->execute($rec{momefid}, $id);

    return $id;
}

sub write_instrument {

    # Ukulele was put in siginup sheet without a class, so no
    # hypen in the 3rd record, which messes up our parsing
    # and hash creation later.
    if ($_[2] !~ /-/) {
        $_[2] = 'Ukulele Ministry - Ukulele';
    }

    my @rec;
    push @rec, $_[0], $_[1];
    push @rec, split(/\s-\s/, $_[2], 2);
    push @rec, $_[3];

    my $x = 0;
    my @fields = qw/ studentid grade class instrument experience /;
    my %rec = map { $_ => $rec[$x++] } @fields;
    my @in_fields = qw/ studentid class instrument experience day /;

    my $grade = $rec{grade};
    my $class = $rec{class};
    my $instrument = $rec{instrument};

    if ($class eq 'Ukulele') {
        $instrument = 'Ukulele';
        $class = 'Ukulele Ministry';
    }

    # XXX: Fixme - this totally didn't work
    if ($class eq 'Band' and $grade > 5) {
        $class = 'Advanced Band';
    }

    # XXX: Fixme - this needs to be numbers 0 = Sunday, 1 = Monday, ect... for
    # the sort order coming out of the DB to work
    if ($class eq 'Orchestra' or $instrument eq 'Ukulele') {
        $rec{day} = 'Monday';
    } elsif ($class eq 'Advanced Band') {
        $rec{day} = 'Tuesday';
    } elsif ($class eq 'Band' and $grade eq '4') {
        $rec{day} = 'Wednesday';
    } elsif ($class eq 'Band' and $grade eq '5') {
        $rec{day} = 'Thursday';
    } elsif ($class eq 'Jazz Band') {
        $rec{day} = 'Tuesday';
    } else {
        warn 'How did we get here, excatly?';
    }

    my $class_sth = $dbh->prepare_cached(
        qq{ insert into class_member ( personid, class, instrument, experience, day ) values (?,?,?,?,?); }
    );

    $class_sth->execute(map{ce($_)} @rec{@in_fields});
}

# Clean element
sub ce {
    return undef unless defined $_[0];
    return undef if $_[0] eq '';
    return $_[0];
}

# Get my rownames and then ditch the row they are in
my %f = reverse %{$rows[0]->content};
pop @rows;

my @parent_fields = qw/ first last email phone /;
my @student_fields = qw/ first last grade /;
my @instrument_fields = qw/ ins years /;
my @fixed_fields = qw/ momefid tuition permission plan /;

foreach my $row (@rows) {
    if ($row->content->{$f{testing}}) {
        next;
    }

    my %row = map { s/^\s+//; s/\s+$//; $_ } %{$row->content};

    my $momefid = $row{$f{momefid}};
    next unless $momefid;

    if ($SAFE) {
        next;
    } else {
        delete_momefid($momefid);
    }

    foreach my $pn (1..4) {
        my @pfields = map { 'p' . $pn  . $_ } @parent_fields;

        if (grep { /\w/ } @row{ @f{@pfields} }) {
            write_parent( $momefid, @row{ @f{@pfields} } );
        }
    }

    foreach my $sn (1..3) {
        my @sfields = map { 's' . $sn . $_ } @student_fields;

        # Make the student's database ID availabe to write_instrument
        my $sid;
        if (grep { /\w/ } @row{ @f{@sfields} }) {
            $sid = write_student($momefid, @row{ @f{@sfields} });
        } else {
            next;
        }

        # Make grade available to write_instrument
        my $grade = $row{ $f{'s' . $sn . 'grade'} };

        foreach my $in (1..3) {
            my @ifields = map { 's' . $sn . $_ . $in } @instrument_fields;

            if (grep { /\w/ } @row{ @f{@ifields} }) {
                write_instrument($sid, $grade, @row{ @f{@ifields} } );
            } else {
                next;
            }
        }
    }
    write_family(@row{@f{@fixed_fields}});
}
