#!/usr/bin/env perl

use Modern::Perl qw/2018/;
use DBI;
use Text::CSV;
use Data::Dumper;

my $SAFE = 1;
my $DBFILE = 'sjsmusic.db';
my $INFILE = 'responses.csv';

my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });

my $fam_sth = $dbh->prepare( qq { insert into family_member (momefid, personid) values (?,?); });

sub delete_momefid {
    my $momefid = $_[0];

    my @sts = (
        qq{ delete from class_member where personid in (select personid from family_member where momefid = $momefid); },
        qq{ delete from person where id in ( select personid from family_member where momefid = $momefid); },
        qq{ delete from family_member where momefid = $momefid; },
        qq{ delete from family where momefid = $momefid; },
    );

    my @rets = ();
    foreach my $st (@sts) {
        push @rets, $dbh->do($st);
    }
}

sub clean_phone {
    return '' unless $_[0];
    $_ = $_[0];

    s/\D//g;
    s/^1//g;
    /(\d{3})(\d{3})(\d{4})/;

    return "$1-$2-$3";
}

{
    my %emails = ();
    my %phones = ();

    sub write_parent {
        my $x = 0;
        my @fields = qw/ momefid first last email phone /;
        my %rec = map { $_ => $_[$x++] } @fields;
        my @in_fields = qw/ first last email phone /;

        $rec{phone} = clean_phone($rec{phone});
        $rec{email} = lc $rec{email};

        if ($emails{$rec{phone}}++) {
            $rec{phone} = undef;
        }

        if ($emails{$rec{email}}++) {
            $rec{email} = undef;
        }

        my $in_sth = $dbh->prepare_cached(
            qq{ insert into person ( type, firstname, lastname, email, phone ) values (?,?,?,?,?); }
        );

        $in_sth->execute( 'parent', map{ce($_)} @rec{@in_fields} );
        my $id = $dbh->last_insert_id('','', 'person', 'id');

        $fam_sth->execute($rec{momefid}, $id);
    }
}

sub write_family {
    my $x = 0;
    my @fields = qw/ momefid tuition permission plan /;
    my %rec = map { $_ => $_[$x++] } @fields;
    my @in_fields = qw/ momefid family_name tuition plan permission /;

    my $names_sth = $dbh->prepare_cached(
        qq{ select distinct(lastname) from person where id in ( select personid from family_member where momefid = ?); }
    );
    $names_sth->execute($rec{momefid});
    my @names = map { $_->[0] } @{ $names_sth->fetchall_arrayref() };
    $rec{family_name} = join ' / ', @names;

    ($rec{permission}) = map { lc } $rec{permission} =~ /^(\w+)/;
    ($rec{plan}) = $rec{plan} =~ /^(\d)/;

    my $family_sth = $dbh->prepare_cached(
        qq{ insert into family ( momefid, name, tuition, plan, permission, session, nobill ) values (?, ?, ?, ?, ?,
            (select id from session where active is not null), ''); }
    );

    $family_sth->execute(map{ce($_)}@rec{@in_fields});
}

sub write_student {
    my $x = 0;
    my @fields = qw/ momefid first last grade homeroom /;
    my %rec = map { $_ => $_[$x++] } @fields;
    my @in_fields = qw/ first last grade homeroom /;

    my $in_sth = $dbh->prepare_cached(
        qq{ insert into person ( type, firstname, lastname, grade, homeroom ) values (?,?,?,?,?); }
    );

    $in_sth->execute( 'student', map{ce($_)} @rec{@in_fields} );
    my $id = $dbh->last_insert_id('','', 'person', 'id');

    $fam_sth->execute($rec{momefid}, $id);

    return $id;
}

sub write_instrument {
    # Ukulele, violin, and chorus don't have classes on the signup form
    # as these instruments aren't available in multiple classes.
    # Add a "fake" class name so that things parse correctly.
    if ($_[2] !~ /-/) {
        if ($_[2] =~ /Ukulele/) {
            $_[2] = 'Ukulele Ministry - Ukulele';
        } elsif ($_[2] =~ /Violin/) {
            $_[2] = 'Violin - Violin';
        } elsif ($_[2] =~ /Chorus/) {
            $_[2] = 'Chorus - Voice';
        } else {
            warn 'Weird class or instrument';
        }
    }

    my @rec;
    push @rec, $_[0], $_[1];
    push @rec, split(/\s-\s/, $_[2], 2);
    push @rec, $_[3];

    my $x = 0;
    my @fields = qw/ studentid grade class instrument experience /;
    my %rec = map { $_ => $rec[$x++] } @fields;
    my @in_fields = qw/ studentid class instrument experience day /;

    if ($rec{class} eq 'Violin' or $rec{instrument} eq 'Ukulele') {
        $rec{day} = '1';    # Monday
    } elsif ($rec{class} eq 'Band' and $rec{grade} > 5) {
        $rec{class} = 'Advanced Band';
        $rec{day} = '2';    # Tuesday
    } elsif ($rec{class} eq 'Band' and $rec{grade} eq '4') {
        $rec{day} = '3';    # Wednsday
        $rec{class} = '4th Grade Band';
    } elsif ($rec{class} eq 'Band' and $rec{grade} eq '5') {
        $rec{day} = '4';    # Thursday
        $rec{class} = '5th Grade Band';
    } elsif ($rec{class} eq 'Jazz Band') {
        $rec{day} = '2';    # Tuesday
    } elsif ($rec{class} eq 'Chorus') {
        $rec{day} = 3;      # Wednsday
    } else {
        warn 'How did we get here, excatly?';
    }

    my $class_sth = $dbh->prepare_cached(
        qq{ insert into class_member ( personid, class, instrument, experience, day ) values (?,?,?,?,?); }
    );

    $class_sth->execute(map{ce($_)} @rec{@in_fields});
}

# Clean element
sub ce {
    return undef unless defined $_[0];
    return undef if $_[0] eq '';
    return $_[0];
}

my $momefid_sth = $dbh->prepare_cached('select momefid from family where momefid = ?;');

my $csv = Text::CSV->new();
open(my $infile, '<', $INFILE) or die "Can't open input file $INFILE: $!\n";

# The first line isn't useful, ditch it.
$csv->getline($infile);

my $x = 0;
my %f = map { $_ => $x++ } $csv->getline($infile)->@*;

my @parent_fields = qw/ first last email phone /;
my @student_fields = qw/ first last grade hr /;
my @instrument_fields = qw/ ins years /;
my @fixed_fields = qw/ momefid tuition permission plan /;

while (my $row = $csv->getline($infile)) {
    if ($row->[$f{testing}]) {
        next;
    }

    my @row = map { s/^\s+//; s/\s+$//; $_ } $row->@*;

    #foreach my $field (sort keys %f) {
    #    printf "%12s: %s\n", $field, $row[$f{$field}];
    #}

    my $momefid = $row[$f{momefid}];
    next unless $momefid;

    $momefid_sth->execute($momefid);
    my $exists = $momefid_sth->fetchrow_array();
    $momefid_sth->finish();

    if ($SAFE and $exists) {
        next;
    }

    if (not $SAFE and $exists) {
        delete_momefid($momefid);
    }

    # There are up to four parents/guardians for each family
    foreach my $pn (1..4) {
        my @pfields = map { 'p' . $pn  . $_ } @parent_fields;

        if (grep { /\w/ } @row[ @f{@pfields} ]) {
            write_parent( $momefid, @row[ @f{@pfields} ] );
        }
    }

    # There are up to three students for each family
    foreach my $sn (1..3) {
        my @sfields = map { 's' . $sn . $_ } @student_fields;

        # Make the student's database ID available to write_instrument
        my $sid;

        #print Dumper \@sfields;
        #print Dumper \@f{@sfields};
        #print Dumper \@row[@f{@sfields}];

        if (grep { /\w/ } @row[ @f{@sfields} ]) {
            $sid = write_student($momefid, @row[ @f{@sfields} ]);
        } else {
            next;
        }

        # Make grade available to write_instrument
        my $grade = $row[ $f{'s' . $sn . 'grade'} ];

        unless ($sid and $grade) {
            die "Can't write an instrument without grade or student id.\n";
        }

        # Each student can sign up for up to four instruments
        foreach my $in (1..4) {
            my @ifields = map { 's' . $sn . $_ . $in } @instrument_fields;

            if (grep { /\w/ } @row[ @f{@ifields} ]) {
                write_instrument($sid, $grade, @row[ @f{@ifields} ] );
            } else {
                next;
            }
        }
    }
    write_family(@row[@f{@fixed_fields}]);
}
