#!/usr/bin/env perl

use Modern::Perl '2018';
use DBI;
use Getopt::Long;
use DateTime;
use Text::CSV;

my $TESTING;
my $DEBUG;
# Number of days after payment date that a payment is due.
my $PAYMENT_INTERVAL = 5;
# Balance amount in dollars under wich we don't send an invoice - they are still recorded in DB
my $INVOICE_THRESHOLD = 5;
my $PAYPAL_BASE = 'https://www.paypal.me/mrsolearymusic/';
my $DBFILE = 'sjsmusic.db';
my $dbh = DBI->connect("dbi:SQLite:dbname=$DBFILE",'','', { RaiseError => 1 });

open my $out, '>', 'invoices.csv' or die "Can't open output: $!\n";
my $csv = Text::CSV->new();

my $tz = DateTime::TimeZone->new( name => 'local' );

my $F;  # Force/Followup - Generate invoices after a non-scheduled payment day and have the PAYMENT_INTERVAL set to 0
my $E;  # Early - Generate invoices early, keep the PAYMENT_INTERVAL at default
my $I;  # Interval - For use with $E or $F, to override PAYMENT_INTERVAL
my $N;  # Normal - For use with Force/Followup - put in the normal invloice sheet, not the past due.

GetOptions(
    'force|followup' => \$F,
    'early'          => \$E,
    'interval=i'     => \$I,
    'normal'         => \$N,
    'testing'        => \$TESTING,
    'debug'          => \$DEBUG,
);

unless ($F or $E or today_is_payment_date()) {
    die "Today isn't a payment date and --force, --followup or --early not specified.\n";
}

sub paypal_amount {
    my $cash = $_[0];

    $cash += .30;
    return sprintf '%.2f', $cash / ( 1 - .029 );
}

sub paypal_url {
    my $amount = $_[0];

    return "$PAYPAL_BASE$amount";
}

sub get_parents {
    my $id = $_[0];

    my $parent_st = qq{ select firstname, lastname, email, id as personid from person where
                type = 'parent' and
                email is not null and
                id in (select personid from family_member where momefid = ?)};

    my $parent_sth = $dbh->prepare_cached($parent_st);
    $parent_sth->execute($id);

    my @fields = qw/ first last email /;
    my @parents = ();

    my $row;
    while ( $row = $parent_sth->fetchrow_hashref() ) {
        push @parents, $row;
    }
    $parent_sth->finish();

    return @parents;
}

sub invoice_date {
    my $id = DateTime->now();

    $id->set_time_zone($tz);

    return $id, sprintf '%s, %s %s, %s', $id->day_name(), $id->month_name(), format_day($id->day()), $id->year();
}

sub payment_date {
    my $id; # Invoice Date
    my $pd; # Payment Date

    if ($E) {
        if ($I) {
            $pd = $id->add(days => $I);
        } else {
            my ($next_billing_date) = $dbh->selectall_array(
                qq{ select date from payment_schedule where date > date('now', 'localtime') order by date limit 1; }
            );
            my ($y, $m, $d) = split '-', $next_billing_date->[0];
            $id = DateTime->new(year => $y, month => $m, day => $d);
        }
    } else {
        $id = DateTime->now();
    }

    if ($I) {
        $pd = $id->add(days => $I);
    } else {
        if ($F) {
            $pd = $id;
        } else {
            $pd = $id->add(days => $PAYMENT_INTERVAL);
        }
    }

    $pd->set_time_zone($tz);

    return $pd, sprintf '%s, %s %s, %s', $pd->day_name(), $pd->month_name(), format_day($pd->day()), $pd->year();
}

sub today_is_payment_date {
    return @{$dbh->selectrow_arrayref(qq{ select count(*) from payment_schedule where date = date('now', 'localtime'); })}[0];
}

sub format_day {
    my $num = shift;

    my $suffix = '';
    for ($num) {
        if (/^11$/) { $suffix = 'th'; last; }
        if (/^12$/) { $suffix = 'th'; last; }
        if (/^13$/) { $suffix = 'th'; last; }
        if (/1$/)   { $suffix = 'st'; last; }
        if (/2$/)   { $suffix = 'nd'; last; }
        if (/3$/)   { $suffix = 'rd'; last; }
        default { $suffix = 'th' }
    }

    return $num . $suffix;
}

sub record_to_db {
    my %i = @_;

    my $inv_sth = $dbh->prepare_cached(qq{
        insert into invoice
            (personid, amount, paypal, date, duedate, donotsend, testing, session)
            values (?,?,?,?,?,?,?,(select id from session where active is not null));
    });

    $inv_sth->execute($i{personid}, $i{balance}, $i{paypal}, $i{invoice_dt}->ymd(), $i{payment_dt}->ymd(), $i{donotsend}, $TESTING);

    return $dbh->last_insert_id('','', 'invoice', 'id');
}

my @email_fields = ('First Name', 'Last Name', 'Email Address', 'File Attachments', 'Scheduled Date', 'Mail Merge Status');
my @inv_fields = qw/ momefid balance plan tuition paypal paypal_url invoice_date payment_date /;
my @out_fields = (@email_fields, 'invid',  @inv_fields);


$csv->say($out, \@out_fields);

my %emails_seen = ();

sub invoice_to_google {
    my $act = $_[0];

    # Balances will be negative, since these are people that owe
    # But we don't want to show people that on their invoice
    $act->{balance} =~ s/^-//;
    $act->{balance} = sprintf '%.2f', $act->{balance};
    $act->{tuition} = sprintf '%.2f', $act->{tuition};
    $act->{paypal} = paypal_amount $act->{balance};
    $act->{paypal_url} = paypal_url $act->{paypal};
    $act->{attachment} = '\\input\\family-statements\\' . $act->{momefid} . '\\statement.html';
    ($act->{invoice_dt}, $act->{invoice_date}) = invoice_date();
    ($act->{payment_dt}, $act->{payment_date}) = payment_date();

    # All the reasons we don't send invoices to people
    if ($act->{nobill} eq 'I' or # I means't don't invoice
        $act->{nobill} eq 'B' or # B means both. Don't rate or invoice
        $act->{balance} < $INVOICE_THRESHOLD or  # Don't send if balance is under threshold
        ($F and $act->{nobill} eq 'F')) {  # If we are in follow-up mode, F billing status means don't send follow-up
        $act->{donotsend} = 1;
    }

    my @parents = get_parents $act->{momefid};
    foreach my $parent (@parents) {
        if ($emails_seen{$parent->{email}}++) {
            next;
        }

        if ($DEBUG) {
            use Data::Dumper;
            $Data::Dumper::Sortkeys = 1;
            my @keys = grep { $_ !~ /_dt$/ } keys $act->%*;
            my %rec;
            @rec{@keys} = @{$act}{@keys};
            print Dumper \%rec;
            <>;
            next;
        }

        my $invid = record_to_db(%{$act}, %{$parent});

        if ($act->{donotsend}) {
            my @afields = qw( momefid nobill balance );
            my @pfields = qw( firstname lastname );
            warn sprintf "Not sending invoice for family %d - status %s - balance %.2f - %s %s\n", @{$act}{@afields}, @{$parent}{@pfields};
            next;
        }

        my @row = ();

        # Parent info for invoice
        foreach my $f (qw/ firstname lastname email /){
            push @row, $parent->{$f};
        }

        # Path to the family's statement
        push @row, $act->{attachment};

        # Blank columns to appease the mail merge app
        foreach my $n (1..2) {
            push @row, undef;
        }

        push @row, $invid;

        # Additional fields for invoice template
        foreach my $f (@inv_fields) {
            push @row, $act->{$f};
        }

        $csv->say($out, \@row);
    }
}

sub ce {
    return '' unless defined $_[0];
    return $_[0];
}

sub get_account {
    my $momefid = $_[0];

    my $act = $dbh->selectrow_hashref(
        qq{ select momefid, tuition, plan, name, nobill from family where momefid = ?; },
        undef,
        $momefid,
    );

    ($act->{short_name}) = split '/', $act->{name};

    return $act;
}

sub get_balance {
    my $momefid = $_[0];

    my $count = $dbh->selectrow_hashref(
        qq{ select count(id) as count from ledger where type = 'debit' and momefid = ? },
        undef,
        $momefid,
    );

    unless ($count->{count}) {
        return 0, 0;
    }

    my $balance = $dbh->selectrow_hashref(
        qq{ select sum(amount) as balance from ledger where momefid = ?; },
        undef,
        $momefid,
    );

    return $balance->{balance}, $count->{count};
}

my @ids_arr = $dbh->selectall_array(
    qq{ select momefid from billing_family; }
);

my @ids = map { $_->[0] } @ids_arr;

my $id_str = join ',', @ids;

my @count = $dbh->selectall_array(
    qq{ select count(id) from family where momefid in ($id_str) and nobill != ''; }
);

if ($count[0]->[0]) {
    warn "There is at least one account with non-standard billing status in this invoice queue. See `./billing-status` for details.\n";
}

foreach my $id (@ids) {
    my $act = get_account($id);

    ($act->{balance}, $act->{count}) = get_balance($id);

    if ($act->{balance} < 0) {
        invoice_to_google($act);
    }
}

# So I don't forget to mark them sent
system './send-invoices';
